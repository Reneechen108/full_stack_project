{"ast":null,"code":"var _jsxFileName = \"/Users/ruichunchen/my-react/src/Context.js\";\nimport React, { Component } from 'react'; // import items from './data';\n\nimport Client from './Contentful';\nClient.getEntries({\n  content_type: \"beachResortRoom\"\n}).then(response => console.log(response.items));\nconst RoomContext = React.createContext(); // <RoomContext.Provider value={'hello'}\n\nclass RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      houses: [],\n      sortedRooms: [],\n      featuredHouses: [],\n      loading: true,\n      type: 'all',\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.getData = async () => {\n      try {\n        let response = await Client.getEntries({\n          content_type: \"beachResortRoom\"\n        });\n        let houses = this.formatData(response.items);\n        let featuredHouses = houses.filter(house => house.featured === true);\n        let maxPrice = Math.max(...houses.map(item => item.price));\n        let maxSize = Math.max(...houses.map(item => item.size));\n        this.setState({\n          houses,\n          featuredHouses,\n          sortedRooms: houses,\n          loading: false,\n          price: maxPrice,\n          maxPrice: maxPrice,\n          maxSize: maxSize\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getHouse = slug => {\n      let tempHouses = [...this.state.houses];\n      const house = tempHouses.find(house => house.slug === slug);\n      return house;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterHouses); // const type = event.target.type;\n      // const name = event.target.name;\n      // const value = event.target.value;\n      //console.log(`this is type: ${type}, this is name: ${name}, this is value: ${value}`);\n    };\n\n    this.filterHouses = () => {\n      let {\n        houses,\n        type,\n        capacity,\n        price,\n        minSize,\n        maxSize,\n        breakfast,\n        pets\n      } = this.state; // all the houses\n\n      let tempHouses = [...houses]; // transform value\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); // filter by type\n\n      if (type !== 'all') {\n        tempHouses = tempHouses.filter(house => house.type === type);\n      } // filter by capacity\n\n\n      if (capacity !== 1) {\n        tempHouses = tempHouses.filter(house => house.capacity >= capacity);\n      } // filter by price\n\n\n      tempHouses = tempHouses.filter(house => house.price <= price); // filter by size\n\n      tempHouses = tempHouses.filter(house => house.size >= minSize && house.size <= maxSize); // filter by breakfast\n\n      if (breakfast) {\n        tempHouses = tempHouses.filter(house => house.breakfast === true);\n      } // filter by pets\n\n\n      if (pets) {\n        tempHouses = tempHouses.filter(house => house.pets === true);\n      } // change state\n\n\n      this.setState({\n        sortedRooms: tempHouses\n      }); // console.log(\"hello\");\n    };\n  }\n\n  componentDidMount() {//this.getData\n    // let houses = this.formatData(items);\n    // //console.log(houses);\n    // let featuredHouses = houses.filter(house => house.featured === true);\n    // let maxPrice = Math.max(...houses.map(item => item.price));\n    // let maxSize = Math.max(...houses.map(item => item.size));\n    // this.setState({\n    //     houses, \n    //     featuredHouses, \n    //     sortedRooms: houses, \n    //     loading: false,\n    //     price: maxPrice,\n    //     maxPrice: maxPrice,\n    //     maxSize: maxSize\n    // });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let house = { ...item.fields,\n        images,\n        id\n      }; //images : images overwrite\n\n      return house;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(RoomContext.Provider, {\n      value: { ...this.state,\n        getHouse: this.getHouse,\n        handleChange: this.handleChange\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer;\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(RoomConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 23\n      }\n    })));\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["/Users/ruichunchen/my-react/src/Context.js"],"names":["React","Component","Client","getEntries","content_type","then","response","console","log","items","RoomContext","createContext","RoomProvider","state","houses","sortedRooms","featuredHouses","loading","type","capacity","price","minPrice","maxPrice","minSize","maxSize","breakfast","pets","getData","formatData","filter","house","featured","Math","max","map","item","size","setState","error","getHouse","slug","tempHouses","find","handleChange","event","target","value","checked","name","filterHouses","parseInt","componentDidMount","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n// import items from './data';\nimport Client from './Contentful';\n\nClient.getEntries({\n    content_type: \"beachResortRoom\"\n}).then(response => console.log(response.items));\n\nconst RoomContext = React.createContext();\n// <RoomContext.Provider value={'hello'}\nclass RoomProvider extends Component {\n    state={\n        houses:[],\n        sortedRooms: [],\n        featuredHouses: [],\n        loading: true,\n        type: 'all',\n        capacity: 1,\n        price: 0,\n        minPrice: 0,\n        maxPrice: 0,\n        minSize: 0,\n        maxSize: 0,\n        breakfast: false,\n        pets: false\n    };\n    // getData{}\n    getData = async() => {\n        try{\n            let response = await Client.getEntries({\n                content_type: \"beachResortRoom\"\n            });\n            let houses = this.formatData(response.items);\n            let featuredHouses = houses.filter(house => house.featured === true);\n            let maxPrice = Math.max(...houses.map(item => item.price));\n            let maxSize = Math.max(...houses.map(item => item.size));\n            this.setState({\n                houses, \n                featuredHouses, \n                sortedRooms: houses, \n                loading: false,\n                price: maxPrice,\n                maxPrice: maxPrice,\n                maxSize: maxSize\n            });\n        }catch(error){\n            console.log(error);\n        }\n    }\n\n    componentDidMount(){\n        //this.getData\n        // let houses = this.formatData(items);\n        // //console.log(houses);\n        // let featuredHouses = houses.filter(house => house.featured === true);\n        // let maxPrice = Math.max(...houses.map(item => item.price));\n        // let maxSize = Math.max(...houses.map(item => item.size));\n        // this.setState({\n        //     houses, \n        //     featuredHouses, \n        //     sortedRooms: houses, \n        //     loading: false,\n        //     price: maxPrice,\n        //     maxPrice: maxPrice,\n        //     maxSize: maxSize\n        // });\n    }\n\n    formatData(items){\n        let tempItems = items.map(item => {\n            let id = item.sys.id;\n            let images = item.fields.images.map(image => image.fields.file.url);\n            let house = {...item.fields, images, id}; //images : images overwrite\n            return house;\n        });\n        return tempItems;\n    }\n\n    getHouse = (slug) => {\n        let tempHouses = [...this.state.houses];\n        const house = tempHouses.find(house => house.slug === slug);\n        return house;\n    }\n\n    handleChange = event => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = event.target.name;\n        this.setState({\n            [name]: value\n        }, this.filterHouses)\n        // const type = event.target.type;\n        // const name = event.target.name;\n        // const value = event.target.value;\n        //console.log(`this is type: ${type}, this is name: ${name}, this is value: ${value}`);\n    }\n\n    filterHouses = () => {\n        let {\n            houses, type, capacity, price, minSize, maxSize, breakfast, pets\n        } = this.state;\n        // all the houses\n        let tempHouses = [...houses];\n\n        // transform value\n        capacity = parseInt(capacity);\n        price = parseInt(price);\n\n        // filter by type\n        if (type !== 'all') {\n            tempHouses = tempHouses.filter(house => house.type === type);\n        }\n\n        // filter by capacity\n        if(capacity !== 1){\n            tempHouses = tempHouses.filter(house => house.capacity >= capacity);\n        }\n\n        // filter by price\n        tempHouses = tempHouses.filter(house => house.price <= price);\n        // filter by size\n        tempHouses = tempHouses.filter(house => house.size >= minSize && house.size <= maxSize);\n        // filter by breakfast\n        if(breakfast){\n            tempHouses = tempHouses.filter(house => house.breakfast === true);\n        }\n        // filter by pets\n        if(pets){\n            tempHouses = tempHouses.filter(house => house.pets === true);\n        }\n\n        // change state\n        this.setState({\n            sortedRooms: tempHouses\n        })\n        // console.log(\"hello\");\n    }\n\n    render() {\n        return (\n            <RoomContext.Provider value={{\n                ...this.state, \n                getHouse: this.getHouse, \n                handleChange: this.handleChange\n                }}>\n                {this.props.children}\n            </RoomContext.Provider>\n        )\n    }\n}\n\nconst RoomConsumer = RoomContext.Consumer;\n\nexport function withRoomConsumer(Component){\n    return function ConsumerWrapper(props){\n        return (\n        <RoomConsumer>\n            {value => <Component {...props} context={value}/> }\n        </RoomConsumer>\n        );\n    };\n}\n\nexport{RoomProvider, RoomConsumer, RoomContext}"]},"metadata":{},"sourceType":"module"}
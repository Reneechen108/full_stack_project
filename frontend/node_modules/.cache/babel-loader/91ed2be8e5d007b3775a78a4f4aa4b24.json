{"ast":null,"code":"var _jsxFileName = \"/Users/ruichunchen/my-react/src/Context.js\";\nimport React, { Component } from 'react';\nimport items from './data';\nconst RoomContext = React.createContext(); // <RoomContext.Provider value={'hello'}\n\nclass RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      houses: [],\n      sortedRooms: [],\n      featuredHouses: [],\n      loading: true,\n      type: 'all',\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.getHouse = slug => {\n      let tempHouses = [...this.state.houses];\n      const house = tempHouses.find(house => house.slug === slug);\n      return house;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = event.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterHouses); // const type = event.target.type;\n      // const name = event.target.name;\n      // const value = event.target.value;\n      //console.log(`this is type: ${type}, this is name: ${name}, this is value: ${value}`);\n    };\n\n    this.filterHouses = () => {\n      let {\n        houses,\n        type,\n        capacity,\n        price,\n        minSize,\n        maxSize,\n        breakfast,\n        pets\n      } = this.state; // all the houses\n\n      let tempHouses = [...houses]; // transform value\n\n      capacity = parseInt(capacity); // filter by type\n\n      if (type !== 'all') {\n        tempHouses = tempHouses.filter(house => house.type === type);\n      } // filter by capacity\n\n\n      if (capacity !== 1) {\n        tempHouses = tempHouses.filter(house => house.capacity === capacity);\n      }\n\n      this.setState({\n        sortedHouses: tempHouses\n      }); // console.log(\"hello\");\n    };\n  }\n\n  // getData{}\n  componentDidMount() {\n    //this.getData\n    let houses = this.formatData(items); //console.log(houses);\n\n    let featuredHouses = houses.filter(house => house.featured === true);\n    let maxPrice = Math.max(...houses.map(item => item.price));\n    let maxSize = Math.max(...houses.map(item => item.size));\n    this.setState({\n      houses,\n      featuredHouses,\n      sortedRooms: houses,\n      loading: false,\n      price: maxPrice,\n      maxPrice: maxPrice,\n      maxSize: maxSize\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let house = { ...item.fields,\n        images,\n        id\n      }; //images : images overwrite\n\n      return house;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(RoomContext.Provider, {\n      value: { ...this.state,\n        getHouse: this.getHouse,\n        handleChange: this.handleChange\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer;\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(RoomConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 27\n      }\n    })));\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["/Users/ruichunchen/my-react/src/Context.js"],"names":["React","Component","items","RoomContext","createContext","RoomProvider","state","houses","sortedRooms","featuredHouses","loading","type","capacity","price","minPrice","maxPrice","minSize","maxSize","breakfast","pets","getHouse","slug","tempHouses","house","find","handleChange","event","target","value","checked","name","setState","filterHouses","parseInt","filter","sortedHouses","componentDidMount","formatData","featured","Math","max","map","item","size","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport items from './data';\n\nconst RoomContext = React.createContext();\n// <RoomContext.Provider value={'hello'}\nclass RoomProvider extends Component {\n    state = {\n        houses: [],\n        sortedRooms: [],\n        featuredHouses: [],\n        loading: true,\n        type: 'all',\n        capacity: 1,\n        price: 0,\n        minPrice: 0,\n        maxPrice: 0,\n        minSize: 0,\n        maxSize: 0,\n        breakfast: false,\n        pets: false\n    };\n    // getData{}\n\n    componentDidMount() {\n        //this.getData\n        let houses = this.formatData(items);\n        //console.log(houses);\n        let featuredHouses = houses.filter(house => house.featured === true);\n        let maxPrice = Math.max(...houses.map(item => item.price));\n        let maxSize = Math.max(...houses.map(item => item.size));\n        this.setState({\n            houses,\n            featuredHouses,\n            sortedRooms: houses,\n            loading: false,\n            price: maxPrice,\n            maxPrice: maxPrice,\n            maxSize: maxSize\n        });\n    }\n\n    formatData(items) {\n        let tempItems = items.map(item => {\n            let id = item.sys.id;\n            let images = item.fields.images.map(image => image.fields.file.url);\n            let house = { ...item.fields, images, id }; //images : images overwrite\n            return house;\n        });\n        return tempItems;\n    }\n\n    getHouse = (slug) => {\n        let tempHouses = [...this.state.houses];\n        const house = tempHouses.find(house => house.slug === slug);\n        return house;\n    }\n\n    handleChange = event => {\n        const target = event.target;\n        const value = event.type === 'checkbox' ? target.checked : target.value;\n        const name = event.target.name;\n        this.setState({\n            [name]: value\n        }, this.filterHouses)\n        // const type = event.target.type;\n        // const name = event.target.name;\n        // const value = event.target.value;\n        //console.log(`this is type: ${type}, this is name: ${name}, this is value: ${value}`);\n    }\n\n    filterHouses = () => {\n        let {\n            houses, type, capacity, price, minSize, maxSize, breakfast, pets\n        } = this.state;\n        // all the houses\n        let tempHouses = [...houses];\n        // transform value\n        capacity = parseInt(capacity);\n\n        // filter by type\n        if (type !== 'all') {\n            tempHouses = tempHouses.filter(house => house.type === type);\n        }\n\n        // filter by capacity\n        if(capacity !== 1){\n            tempHouses = tempHouses.filter(house => house.capacity === capacity);\n        }\n        \n        this.setState({\n            sortedHouses: tempHouses\n        })\n        // console.log(\"hello\");\n    }\n\n    render() {\n        return (\n            <RoomContext.Provider value={{\n                ...this.state,\n                getHouse: this.getHouse,\n                handleChange: this.handleChange\n            }}>\n                {this.props.children}\n            </RoomContext.Provider>\n        )\n    }\n}\n\nconst RoomConsumer = RoomContext.Consumer;\n\nexport function withRoomConsumer(Component) {\n    return function ConsumerWrapper(props) {\n        return (\n            <RoomConsumer>\n                {value => <Component {...props} context={value} />}\n            </RoomConsumer>\n        );\n    };\n}\n\nexport { RoomProvider, RoomConsumer, RoomContext }"]},"metadata":{},"sourceType":"module"}
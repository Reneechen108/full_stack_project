{"ast":null,"code":"var _jsxFileName = \"/Users/ruichunchen/my-react/src/Context.js\";\nimport React, { Component } from 'react';\nimport items from './data';\nconst RoomContext = React.createContext(); // <RoomContext.Provider value={'hello'}\n\nclass RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      houses: [],\n      sortedRooms: [],\n      featuredHouses: [],\n      loading: true,\n      type: 'all',\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.getHouse = slug => {\n      let tempHouses = [...this.state.houses];\n      const house = tempHouses.find(house => house.slug === slug);\n      return house;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = event.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterHouses); // const type = event.target.type;\n      // const name = event.target.name;\n      // const value = event.target.value;\n      //console.log(`this is type: ${type}, this is name: ${name}, this is value: ${value}`);\n    };\n\n    this.filterHouses = () => {\n      let {\n        houses,\n        type,\n        capacity,\n        price,\n        minSize,\n        maxSize,\n        breakfast,\n        pets\n      } = this.state;\n      let tempHouses = [...houses];\n\n      if (type !== 'all') {\n        tempHouses = tempHouses.filter(house => house.type === type);\n      }\n\n      this.setState({\n        sortedRooms: tempHouses\n      }); // console.log(\"hello\");\n    };\n  }\n\n  // getData{}\n  componentDidMount() {\n    //this.getData\n    let houses = this.formatData(items); //console.log(houses);\n\n    let featuredHouses = houses.filter(house => house.featured === true);\n    let maxPrice = Math.max(...houses.map(item => item.price));\n    let maxSize = Math.max(...houses.map(item => item.size));\n    this.setState({\n      houses,\n      featuredHouses,\n      sortedRooms: houses,\n      loading: false,\n      price: maxPrice,\n      maxPrice: maxPrice,\n      maxSize: maxSize\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let house = { ...item.fields,\n        images,\n        id\n      }; //images : images overwrite\n\n      return house;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(RoomContext.Provider, {\n      value: { ...this.state,\n        getHouse: this.getHouse,\n        handleChange: this.handleChange\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer;\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(RoomConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 23\n      }\n    })));\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["/Users/ruichunchen/my-react/src/Context.js"],"names":["React","Component","items","RoomContext","createContext","RoomProvider","state","houses","sortedRooms","featuredHouses","loading","type","capacity","price","minPrice","maxPrice","minSize","maxSize","breakfast","pets","getHouse","slug","tempHouses","house","find","handleChange","event","target","value","checked","name","setState","filterHouses","filter","componentDidMount","formatData","featured","Math","max","map","item","size","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport items from './data';\n\nconst RoomContext = React.createContext();\n// <RoomContext.Provider value={'hello'}\nclass RoomProvider extends Component {\n    state={\n        houses:[],\n        sortedRooms: [],\n        featuredHouses: [],\n        loading: true,\n        type: 'all',\n        capacity: 1,\n        price: 0,\n        minPrice: 0,\n        maxPrice: 0,\n        minSize: 0,\n        maxSize: 0,\n        breakfast: false,\n        pets: false\n    };\n    // getData{}\n\n    componentDidMount(){\n        //this.getData\n        let houses = this.formatData(items);\n        //console.log(houses);\n        let featuredHouses = houses.filter(house => house.featured === true);\n        let maxPrice = Math.max(...houses.map(item => item.price));\n        let maxSize = Math.max(...houses.map(item => item.size));\n        this.setState({\n            houses, \n            featuredHouses, \n            sortedRooms: houses, \n            loading: false,\n            price: maxPrice,\n            maxPrice: maxPrice,\n            maxSize: maxSize\n        });\n    }\n\n    formatData(items){\n        let tempItems = items.map(item => {\n            let id = item.sys.id;\n            let images = item.fields.images.map(image => image.fields.file.url);\n            let house = {...item.fields, images, id}; //images : images overwrite\n            return house;\n        });\n        return tempItems;\n    }\n\n    getHouse = (slug) => {\n        let tempHouses = [...this.state.houses];\n        const house = tempHouses.find(house => house.slug === slug);\n        return house;\n    }\n\n    handleChange = event => {\n        const target = event.target;\n        const value = event.type === 'checkbox' ? target.checked : target.value;\n        const name = event.target.name;\n        this.setState({\n            [name]: value\n        }, this.filterHouses)\n        // const type = event.target.type;\n        // const name = event.target.name;\n        // const value = event.target.value;\n        //console.log(`this is type: ${type}, this is name: ${name}, this is value: ${value}`);\n    }\n\n    filterHouses = () => {\n        let {\n            houses, type, capacity, price, minSize, maxSize, breakfast, pets\n        } = this.state;\n        let tempHouses = [...houses];\n        if(type !== 'all'){ \n            tempHouses = tempHouses.filter(house => house.type === type);\n        }\n        this.setState({\n            sortedRooms: tempHouses\n        })\n        // console.log(\"hello\");\n    }\n\n    render() {\n        return (\n            <RoomContext.Provider value={{\n                ...this.state, \n                getHouse: this.getHouse, \n                handleChange: this.handleChange\n                }}>\n                {this.props.children}\n            </RoomContext.Provider>\n        )\n    }\n}\n\nconst RoomConsumer = RoomContext.Consumer;\n\nexport function withRoomConsumer(Component){\n    return function ConsumerWrapper(props){\n        return (\n        <RoomConsumer>\n            {value => <Component {...props} context={value}/> }\n        </RoomConsumer>\n        );\n    };\n}\n\nexport{RoomProvider, RoomConsumer, RoomContext}"]},"metadata":{},"sourceType":"module"}